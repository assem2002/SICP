(define (eval exp env)
(cond ((self-evaluating? exp) exp)
    ((symbol? exp) (lookup-variable-value exp env))
    ((quoted? exp) (text-of-quotation exp))
    ((assignment? exp) (eval-assignment exp env))
    ((definition? exp) (eval-definition exp env))
    ((if? exp) (eval-if exp env))
    ((lambda? exp) 
    (eval-sequence (begin-actions exp) env))
    ((cond? exp) (eval (cond->if exp) env))
    ((application? exp)
    (apply (eval (operator exp) env)
    (list-of-values (operands exp) env)))
    (else
    (error "Unknown expression type: EVAL" exp))))


(put 'op 'quoated text-of-quotation)
(put 'op 'define eval-definition)
(put 'op 'if eval-if)
(put 'op 'if eval-if)
(put 'op 'lambda (lambda (exp env) (make-procedure (lambda-parameters exp)
                    (lambda-body exp)
                        env)))
; and so on with begin and cond procedures

(define (eval exp env)
(cond ((self-evaluating? exp) exp)
((symbol? exp) (lookup-variable-value exp env))
    ((get 'op (car exp)) exp env)))
